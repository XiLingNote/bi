package bi.baiqiu.controller;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import bi.baiqiu.page.PageHelper.Page;
import bi.baiqiu.pojo.PcFlowStructureBean;
import bi.baiqiu.service.impl.PcFlowStructureServiceImpl;
import bi.baiqiu.utils.DateUtils;
import bi.baiqiu.utils.ImportExcelUtils;

/**
 * pc流量结构控制层
 * 
 * @author Administrator
 *
 */
@Controller
@RequestMapping("pcFlowStructure")
public class PcFlowStructureController extends BaseController {
	@Autowired
	private PcFlowStructureServiceImpl pcFlowStructureServiceImpl;

	/**
	 * 删除
	 * 
	 * @param bean
	 * @param pageNum
	 * @param pageSize
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "deletePcFlowStructure.do")
	public void deletePcFlowStructure(PcFlowStructureBean bean, Integer pageNum, Integer pageSize,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			WriteObject(response, "删除成功：" + pcFlowStructureServiceImpl.deletePcFlowStructure(bean));
		} catch (Exception e) {
			e.printStackTrace();
			WriteObject(response, "保存失败");
		}
	}

	/**
	 * 分页查询
	 * 
	 * @param bean
	 * @param pageNum
	 * @param pageSize
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "queryPcFlowStructureByPage.do")
	public void queryByPage(PcFlowStructureBean bean, Integer pageNum, Integer pageSize, HttpServletRequest request,
			HttpServletResponse response) {
		try {
			response.setCharacterEncoding("utf-8");
			bean.setShopId("1");
			Gson gson = new GsonBuilder().serializeNulls().create();
			Page<PcFlowStructureBean> page = pcFlowStructureServiceImpl.queryByPage(bean, pageNum, pageSize);
			String json = "{\"total\":" + page.getTotal() + ",\"rows\":" + gson.toJson(page.getResult()) + "}";
			response.getWriter().print(json);
		} catch (Exception e) {
			e.printStackTrace();
			WriteObject(response, "查询出错");
		}
	}

	/**
	 * 更新
	 * 
	 * @param bean
	 * @param pageNum
	 * @param pageSize
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "updatePcFlowStructure.do")
	public void updatePcFlowStructure(PcFlowStructureBean bean, Integer pageNum, Integer pageSize,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			WriteObject(response, "保存成功：" + pcFlowStructureServiceImpl.updatePcFlowStructure(bean));
		} catch (Exception e) {
			e.printStackTrace();
			WriteObject(response, "保存失败");
		}
	}

	/**
	 * 批量删除
	 * 
	 * @param bean
	 * @param pageNum
	 * @param pageSize
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "deletePcFlowStructureByBatch.do")
	public void deletePcFlowStructureByBatch(@RequestParam(value = "idArray[]") int[] idArray,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			int a = pcFlowStructureServiceImpl.deletePcFlowStructureByBatch(idArray);
			WriteObject(response, "删除成功：" + a);
		} catch (Exception e) {
			e.printStackTrace();
			WriteObject(response, "删除失败");
		}
	}

	/**
	 * pc流量结构上传
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "uploadPcFlowStructure.do", method = { RequestMethod.GET, RequestMethod.POST })
	public void uploadPcFlowStructure(HttpServletRequest request, String shopId, HttpServletResponse response) {
		shopId = "1";
		// 上传文件用
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		InputStream in = null;
		List<List<Object>> listob = null;
		// MultipartFile file = multipartRequest.getFile("upfile"); jquery 提交的文件
		MultipartFile file = multipartRequest.getFile("txt_file");// bootstrap获取流的方式
		try {
			if (file == null || file.isEmpty()) {
				throw new Exception("文件不存在！");
			}
			List<PcFlowStructureBean> pcFlowStructures;
			in = file.getInputStream();
			listob = new ImportExcelUtils().getBankListByExcel(in, file.getOriginalFilename());
			pcFlowStructures = new ArrayList<PcFlowStructureBean>();
			for (int i = 0; i < listob.size(); i++) {
				List<Object> lo = listob.get(i);
				if (DateUtils.isDateType(String.valueOf(lo.get(0)))) {
					PcFlowStructureBean pcFlowBean = new PcFlowStructureBean(String.valueOf(lo.get(0)),
							String.valueOf(lo.get(1)), String.valueOf(lo.get(2)), String.valueOf(lo.get(3)),
							String.valueOf(lo.get(4)), String.valueOf(lo.get(5)), String.valueOf(lo.get(6)),
							String.valueOf(lo.get(7)), String.valueOf(lo.get(8)), String.valueOf(lo.get(9)),
							String.valueOf(lo.get(10)), String.valueOf(lo.get(11)), String.valueOf(lo.get(12)),
							String.valueOf(lo.get(13)), String.valueOf(lo.get(14)), String.valueOf(lo.get(15)),
							String.valueOf(lo.get(16)), String.valueOf(lo.get(17)), String.valueOf(lo.get(18)),
							String.valueOf(lo.get(19)), String.valueOf(lo.get(20)), String.valueOf(lo.get(21)),
							String.valueOf(lo.get(22)), String.valueOf(lo.get(23)), String.valueOf(lo.get(24)),
							String.valueOf(lo.get(25)), String.valueOf(lo.get(26)), String.valueOf(lo.get(27)),
							Double.valueOf(String.valueOf(lo.get(28))), shopId);
					pcFlowStructures.add(pcFlowBean);
				} else {
					WriteObject(response, String.valueOf(lo.get(0)) + ":日期格式非法(请使用:yyyy/mm/dd格式)");
					return;
				}
			}
			if (pcFlowStructures.size() > 0)
				pcFlowStructureServiceImpl.insertByBatch(pcFlowStructures);
			else
				WriteObject(response, "无数据");

			WriteObject(response, "保存成功");
		} catch (NullPointerException e4) {
			WriteObject(response, "保存失败,Excel中请删除计算公式仅保留数据上传");
		} catch (Exception e) {
			WriteObject(response, "保存失败");
			e.printStackTrace();
		} finally {
			try {
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
	}

}
