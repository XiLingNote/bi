package bi.baiqiu.service.impl;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import bi.baiqiu.mapper.ShopBeanMapper;
import bi.baiqiu.pojo.RedisPojo;
import bi.baiqiu.pojo.ShopBean;
import bi.baiqiu.pojo.ShopTvShowTablePojo;
import bi.baiqiu.service.OverAllService;
import bi.baiqiu.utils.DateUtils;
import bi.baiqiu.utils.GsonUtils;
import bi.baiqiu.utils.KeyUtils;
import bi.baiqiu.utils.ShopBeanCompare;
import bi.baiqiu.utils.UtilTool;

@Service("redisService")
public class OverAllServiceImpl implements OverAllService {
	@Autowired
	JedisPool jedisPool;
	@Autowired
	private ShopBeanMapper shopDao;

	// @Autowired
	// private Jedis jedisService;

	/**
	 * 查询范围 : 默认当前月
	 */
	@SuppressWarnings("deprecation")
	@Override
	public Map<String, Object> getThisMonth(String department) {
		Map<String, Object> map = new HashMap<String, Object>();
		Set<RedisPojo> treeSet = new TreeSet<RedisPojo>();
		// 当月天数
		// int maxDay = Calendar.getInstance().getActualMaximum(Calendar.DATE);

		Date today = new Date();
		int date = today.getDate();
		String yyyyMM = DateUtils.getyyyyMM(today);
		String lastyyyyMM = DateUtils.getLastyyyyMM(today);
		Jedis jedis = jedisPool.getResource();
		for (int i = 1; i <= date; i++) {
			String dd = (i > 9) ? "" + i : "0" + i;
			String yyyyMMdd = yyyyMM + dd;
			String stringPojo = jedis.hget(department + "DAY", yyyyMMdd);
			if (stringPojo != null) {
				RedisPojo index = GsonUtils.gson.fromJson(stringPojo, RedisPojo.class);

				treeSet.add(index);
			} else {
				RedisPojo index = new RedisPojo();
				index.setDatetime(yyyyMMdd);
				treeSet.add(index);
			}

		}
		RedisPojo last = new RedisPojo();
		String lastPojo = jedis.hget("AllMONTH", lastyyyyMM);
		if (lastPojo != null) {
			last = GsonUtils.gson.fromJson(lastPojo, RedisPojo.class);
		}
		map.put("treeSet", treeSet);
		map.put("last", last);
		jedisPool.returnResource(jedis);
		return map;
	}

	/**
	 * 查询当月数据 并且带有同比 按day排序
	 */
	@SuppressWarnings("deprecation")
	@Override
	public Map<String, Object> getDayofWholeMonth(String department, Date end) {
		Map<String, Object> map = new HashMap<String, Object>();
		Set<RedisPojo> treeSet = new TreeSet<RedisPojo>();
		int date2 = end.getDate();
		int y = end.getYear();
		int m = end.getMonth();
		Jedis jedis = jedisPool.getResource();
		for (int i = 1; i < date2 + 1; i++) {
			String yyyyMMdd = DateUtils.getyyyyMMdd(new Date(y, m, i));
			String string = jedis.hget(department + "DAY", yyyyMMdd);
			if (StringUtils.isNotBlank(string)) {
				RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
				redisPojo.setAlipayCompleteness();
				redisPojo.setCompleteness();
				treeSet.add(redisPojo);
			}
		}

		map.put("treeSet", treeSet);
		// 获取同比数据
		String mm = DateUtils.getLastyyyyMM(end);
		String string = jedis.hget(department + "MONTH", mm);
		if (StringUtils.isNotBlank(string)) {
			RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
			redisPojo.setAlipayCompleteness();
			redisPojo.setCompleteness();
			map.put("last", redisPojo);
		}
		jedisPool.returnResource(jedis);
		return map;
	}

	@Override
	public Map<String, Object> getDayOfMonth(String department, Date begin, Date end) {
		Map<String, Object> map = new HashMap<String, Object>();
		Set<RedisPojo> treeSet = new TreeSet<RedisPojo>();
		Jedis jedis = null;
		try {
			jedis = jedisPool.getResource();
			int d = begin.getDate();
			int m = begin.getMonth();
			int y = begin.getYear();
			String getyyyyMMdd = DateUtils.getyyyyMMdd(end);
			int endtime = Integer.parseInt(getyyyyMMdd);
			for (int i = d;; i++) {
				Date date = new Date(y, m, i);
				String thisdate = DateUtils.getyyyyMMdd(date);
				int thistime = Integer.parseInt(thisdate);
				if (endtime < thistime) {
					break;
				}
				String string = jedis.hget(department + "DAY", thisdate);
				if (StringUtils.isNotBlank(string)) {
					RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
					redisPojo.setAlipayCompleteness();
					redisPojo.setCompleteness();
					treeSet.add(redisPojo);
				}

			}
			map.put("treeSet", treeSet);
			map.put("last", null);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			jedisPool.returnResource(jedis);
		}
		return map;
	}

	@Override
	public Map<String, Object> getMonthofWholeYear(String department, int y1) {
		Map<String, Object> map = new HashMap<String, Object>();
		Set<RedisPojo> treeSet = new TreeSet<RedisPojo>();
		Jedis jedis = jedisPool.getResource();
		for (int i = 1; i < 13; i++) {
			String field = (i < 10) ? y1 + "0" + i : "" + y1 + i;
			String string = jedis.hget(department + "MONTH", field);
			if (StringUtils.isNotBlank(string)) {
				RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
				redisPojo.setAlipayCompleteness();
				redisPojo.setCompleteness();
				treeSet.add(redisPojo);
			}
		}
		map.put("treeSet", treeSet);
		String string = jedis.hget(department + "YEAR", y1 - 1 + "");
		if (StringUtils.isNotBlank(string)) {
			RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
			redisPojo.setAlipayCompleteness();
			redisPojo.setCompleteness();
			map.put("redisPojo", redisPojo);
		}
		jedisPool.returnResource(jedis);
		return map;
	}

	@Override
	public Map<String, Object> getMonthofYear(String department, Date begin, Date end) {
		Jedis jedis = jedisPool.getResource();
		Map<String, Object> map = new HashMap<String, Object>();
		Set<RedisPojo> treeSet = new TreeSet<RedisPojo>();
		int y = begin.getYear();
		int m = begin.getMonth();
		int d = begin.getDate();
		for (int i = m;; i++) {
			Date date = new Date(y, i, d);
			if (date.after(end)) {
				break;
			}
			String string = jedis.hget(department + "MONTH", DateUtils.getyyyyMM(date));
			if (StringUtils.isNotBlank(string)) {
				RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
				redisPojo.setAlipayCompleteness();
				redisPojo.setCompleteness();
				treeSet.add(redisPojo);
			}
		}
		map.put("treeSet", treeSet);
		jedisPool.returnResource(jedis);
		return map;
	}

	@Override
	public Map<String, Object> getWholeYear(String department, int y2) {
		Map<String, Object> map = new HashMap<String, Object>();
		Set<RedisPojo> treeSet = new TreeSet<RedisPojo>();
		Jedis jedis = jedisPool.getResource();
		String string = jedis.hget(department + "YEAR", "" + y2);
		if (StringUtils.isNotBlank(string)) {
			RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
			redisPojo.setAlipayCompleteness();
			redisPojo.setCompleteness();
			treeSet.add(redisPojo);
		}
		map.put("treeSet", treeSet);

		String string2 = jedis.hget(department + "YEAR", y2 - 1 + "");
		if (StringUtils.isNotBlank(string)) {
			RedisPojo RedisPojo2 = GsonUtils.gson.fromJson(string2, RedisPojo.class);
			RedisPojo2.setAlipayCompleteness();
			RedisPojo2.setCompleteness();
			map.put("last", RedisPojo2);
		}
		jedisPool.returnResource(jedis);
		return map;
	}

	@Override
	public Map<String, Object> getYear(String department, int y1, int y2) {
		Map<String, Object> map = new HashMap<String, Object>();
		Set<RedisPojo> treeSet = new TreeSet<RedisPojo>();
		Jedis jedis = jedisPool.getResource();
		for (int i = y1; i <= y2; i++) {
			String string = jedis.hget(department + "YEAR", "" + i);
			if (StringUtils.isNotBlank(string)) {
				RedisPojo redisPojo = GsonUtils.gson.fromJson(string, RedisPojo.class);
				redisPojo.setAlipayCompleteness();
				redisPojo.setCompleteness();
				treeSet.add(redisPojo);
			}
		}
		map.put("treeSet", treeSet);
		jedisPool.returnResource(jedis);
		return map;
	}

	@Override
	public Map<String, BigDecimal[]> getBusinessHour(ShopBean shop, Map<String, BigDecimal[]> map) throws Exception {
		String shopName = shop.getName();
		Jedis jedis = jedisPool.getResource();
		Date nowDate = new Date();
		// 测试当日期
		nowDate = DateUtils.getTestNow();
		Calendar canlendar = Calendar.getInstance();
		Calendar canlendarEnd = Calendar.getInstance();
		// 当前时间小时数设0
		canlendar.setTime(nowDate);
		canlendar.set(Calendar.HOUR_OF_DAY, 0);
		canlendarEnd.setTime(nowDate);
		Calendar canlendarYesterday = Calendar.getInstance();
		// 昨天日期小时数设零
		canlendarYesterday.setTime(nowDate);
		canlendarYesterday.set(Calendar.HOUR_OF_DAY, 0);
		canlendarYesterday.set(Calendar.DAY_OF_MONTH, (canlendarYesterday.get(Calendar.DAY_OF_MONTH) - 1));
		// 当前的小时数,查询从零点到当前小时的数据
		int endHour = canlendarEnd.get(Calendar.HOUR_OF_DAY);
		// 分计算
		BigDecimal[] redisArray = new BigDecimal[24];
		BigDecimal[] redisArrayYesterday = new BigDecimal[24];
		// 合计
		BigDecimal total = BigDecimal.ZERO;
		BigDecimal yesterdayTotal = BigDecimal.ZERO;
		// 24小时的数据
		for (int i = 0; i <= 23; i++) {
			if (i <= endHour) {
				// 今天数据
				canlendarEnd.setTime(canlendar.getTime());
				String jedisHgetData = jedis.hget(shopName + KeyUtils.HOUR,
						canlendarEnd.get(Calendar.YEAR) + UtilTool.monthAddZero(canlendarEnd.get(Calendar.MONTH) + 1)
								+ UtilTool.monthAddZero(canlendarEnd.get(Calendar.DAY_OF_MONTH))
								+ UtilTool.monthAddZero(canlendarEnd.get(Calendar.HOUR_OF_DAY)));
				// 空设为零
				if (StringUtils.isNotEmpty(jedisHgetData)) {
					RedisPojo jedisPojo = GsonUtils.gson.fromJson(jedisHgetData, RedisPojo.class);
					redisArray[i] = jedisPojo.getGmv();
				} else {
					redisArray[i] = BigDecimal.ZERO;
				}
				// 累加
				total = total.add(redisArray[i]);
				canlendar.add(Calendar.HOUR_OF_DAY, 1);
			}
			// 昨日数据
			canlendarYesterday.setTime(canlendarYesterday.getTime());
			String jedisHgetDataYesterday = jedis.hget(shopName + KeyUtils.HOUR,
					canlendarEnd.get(Calendar.YEAR) + UtilTool.monthAddZero(canlendarYesterday.get(Calendar.MONTH) + 1)
							+ UtilTool.monthAddZero(canlendarYesterday.get(Calendar.DAY_OF_MONTH))
							+ UtilTool.monthAddZero(canlendarYesterday.get(Calendar.HOUR_OF_DAY)));
			if (StringUtils.isNotEmpty(jedisHgetDataYesterday)) {
				RedisPojo jedisPojoYesterday = GsonUtils.gson.fromJson(jedisHgetDataYesterday, RedisPojo.class);
				redisArrayYesterday[i] = jedisPojoYesterday.getGmv();
			} else {
				redisArrayYesterday[i] = BigDecimal.ZERO;
			}
			// 累加
			yesterdayTotal = yesterdayTotal.add(redisArrayYesterday[i]);
			canlendarYesterday.add(Calendar.HOUR_OF_DAY, 1);
		}
		canlendar.setTime(nowDate);
		// 分计
		map.put(shopName, redisArray);
		map.put(shopName + KeyUtils.YESTERDAY, redisArrayYesterday);
		// 合计
		map.put(shopName + KeyUtils.TOTAL, new BigDecimal[] { total });
		map.put(shopName + KeyUtils.YESTERDAYTOTAL, new BigDecimal[] { yesterdayTotal });
		// 店铺总的数据
		// 目标销售额
		String shopMonth = jedis.hget(shopName + KeyUtils.MONTH,
				canlendar.get(Calendar.YEAR) + UtilTool.monthAddZero(canlendar.get(Calendar.MONTH) + 1));
		RedisPojo redisMonth = new RedisPojo();
		if (!StringUtils.isEmpty(shopMonth)) {
			redisMonth = GsonUtils.gson.fromJson(shopMonth, RedisPojo.class);
		}
		// 大屏幕table显示实体
		ShopTvShowTablePojo showTablePojo = new ShopTvShowTablePojo();
		BigDecimal gmv = redisMonth.getGmv();
		BigDecimal gmvTarget = redisMonth.getTarget();
		BigDecimal alipay = redisMonth.getAlipay();
		BigDecimal alipayTarget = redisMonth.getAlipayTarget();
		// gmv四舍五入，保留两位
		showTablePojo.setGmv(gmv);

		showTablePojo.setGmvTarget(gmvTarget);
		if (gmvTarget.compareTo(BigDecimal.ZERO) == 0) {
			showTablePojo.setGmvRate(0d);
		} else {
			showTablePojo.setGmvRate(gmv.divide(gmvTarget, 5, RoundingMode.HALF_DOWN).doubleValue());
		}
		// alipay
		if (alipayTarget.compareTo(BigDecimal.ZERO) == 0) {
			showTablePojo.setAlipayRate(0d);
		} else {
			showTablePojo.setAlipayRate(alipay.divide(alipayTarget, 5, RoundingMode.HALF_DOWN).doubleValue());
		}
		showTablePojo.setAlipayTarget(alipayTarget);
		showTablePojo.setAlipay(alipay);
		showTablePojo.setYesterdaySale(yesterdayTotal);
		showTablePojo.setTodaySale(total);
		shop.setShopTvShowTablePojo(showTablePojo);
		// Gmv和target
		map.put(shopName + KeyUtils.GMV, new BigDecimal[] { redisMonth.getGmv() });
		map.put(shopName + KeyUtils.GMV + KeyUtils.TARGET, new BigDecimal[] { redisMonth.getTarget() });
		jedis.close();
		return map;
	}

	/**
	 * @Function: getShopHourData
	 * @Description:根据部门名称查询店铺循环查询返回map
	 * @param value
	 * @throws Exception
	 * @return void
	 * @throws
	 *
	 * 			Modification
	 *             History: Date Author Version Description
	 *             ---------------------------------------------------------
	 *             2017年9月25日 Jared v1.0.0
	 */
	public Map<String, BigDecimal[]> getShopHourData(String business) throws Exception {
		List<ShopBean> shopBeans = getShopBeans(business);
		Map<String, BigDecimal[]> map = new HashMap<String, BigDecimal[]>();
		for (ShopBean shop : shopBeans) {
			getBusinessHour(shop, map);
		}
		Collections.sort(shopBeans, new ShopBeanCompare());
		return map;
	}

	/**
	 * @Function: getTableshow
	 * @Description:查询shopbean的table显示
	 * @param business
	 * @return
	 * @throws Exception
	 * @return List<ShopBean>
	 * @throws
	 *
	 * 			Modification
	 *             History: Date Author Version Description
	 *             ---------------------------------------------------------
	 *             2017年9月27日 Jared v1.0.0
	 */
	@Override
	public List<ShopBean> getTableshow(String business) throws Exception {
		List<ShopBean> shopBeans = getShopBeans(business);
		Map<String, BigDecimal[]> map = new HashMap<String, BigDecimal[]>();
		for (ShopBean shop : shopBeans) {
			getBusinessHour(shop, map);
		}
		Collections.sort(shopBeans, new ShopBeanCompare());
		return shopBeans;
	}

	/**
	 * @Function: getShopMonthAndTarget
	 * @Description 本月数据显示
	 * @param shopName
	 * @param map
	 * @return
	 * @return Map<String,BigDecimal[]>
	 * @throws
	 *
	 * 			Modification
	 *             History: Date Author Version Description
	 *             ---------------------------------------------------------
	 *             2017年9月26日 Jared v1.0.0
	 */
	@Override
	public Map<String, BigDecimal> getBusinessMonthAndTarget(String business) throws Exception {
		Jedis jedis = jedisPool.getResource();
		Map<String, BigDecimal> businessMap = new HashMap<String, BigDecimal>();
		// 目标销售额
		Calendar canlendar = Calendar.getInstance();
		canlendar.setTime(DateUtils.getTestNow());
		// 测试时间
		String businessMonth = jedis.hget(business + KeyUtils.MONTH,
				canlendar.get(Calendar.YEAR) + UtilTool.monthAddZero(canlendar.get(Calendar.MONTH) + 1));
		RedisPojo redisBusinessMonth;
		if (!StringUtils.isEmpty(businessMonth)) {
			redisBusinessMonth = GsonUtils.gson.fromJson(businessMonth, RedisPojo.class);
		} else {
			redisBusinessMonth = new RedisPojo();
		}
		businessMap.put("business" + KeyUtils.GMV + KeyUtils.TARGET, redisBusinessMonth.getTarget());
		businessMap.put("business" + KeyUtils.GMV, redisBusinessMonth.getGmv());
		businessMap.put("business" + KeyUtils.ALIPAY, redisBusinessMonth.getAlipay());
		businessMap.put("business" + KeyUtils.ALIPAY + KeyUtils.TARGET, redisBusinessMonth.getAlipayTarget());
		jedis.close();
		return businessMap;
	}

	/**
	 * @Function: getShopBeans
	 * @Description:根据事业部获取店铺详情
	 * @param value
	 * @return
	 * @return List<ShopBean>
	 * @throws
	 *
	 * 			Modification
	 *             History: Date Author Version Description
	 *             ---------------------------------------------------------
	 *             2017年9月26日 Jared v1.0.0
	 */
	@Override
	public List<ShopBean> getShopBeans(String business) {
		List<ShopBean> list = shopDao.queryShopByscShort(business);
		return list;
	}

	/**
	 * @Function: getShopDayData
	 * @Description:根据部门遍历店铺查询店铺详细数据，返回部门累计的数据
	 * @param list 统计的店铺集合
	 * @throws ParseException
	 * @return ShopTvShowTablePojo
	 * @throws
	 *
	 * 			Modification
	 *             History: Date Author Version Description
	 *             ---------------------------------------------------------
	 *             2017年10月10日 Jared v1.0.0
	 */
	@Override
	public ShopTvShowTablePojo getShopDayData(List<ShopBean> list) {
		Jedis jedis = jedisPool.getResource();
		Date nowDate = new Date();
		// 测试当日期
		ShopTvShowTablePojo showPojoBusiness = new ShopTvShowTablePojo();
		try {
			nowDate = DateUtils.getTestNow();
			Calendar canlendar = Calendar.getInstance();
			canlendar.setTime(nowDate);
			Calendar canlendarYesterday = Calendar.getInstance();
			canlendarYesterday.setTime(canlendar.getTime());
			canlendarYesterday.set(Calendar.DAY_OF_MONTH, (canlendar.get(Calendar.DAY_OF_MONTH) - 1));
			// 获取并按照今日销售额排序
			for (ShopBean shop : list) {
				// 店铺总的数据今日
				String jedisTodayData = jedis.hget(shop.getName() + KeyUtils.DAY,
						canlendar.get(Calendar.YEAR) + UtilTool.monthAddZero(canlendar.get(Calendar.MONTH) + 1)
								+ UtilTool.monthAddZero(canlendar.get(Calendar.DAY_OF_MONTH)));
				ShopTvShowTablePojo showPojo = new ShopTvShowTablePojo();
				// 空不设值
				if (StringUtils.isNotEmpty(jedisTodayData)) {
					RedisPojo jedisPojo = GsonUtils.gson.fromJson(jedisTodayData, RedisPojo.class);
					// 今日销售
					showPojo.setTodaySale(jedisPojo.getGmv());
					showPojoBusiness.addTodaySale(jedisPojo.getGmv());
					// 今日订单量
					showPojo.setOrderNum(jedisPojo.getOrderNum());
					showPojoBusiness.addOrderNumer(jedisPojo.getOrderNum());
				}
				// 店铺总的数据昨日
				String jedisYesterdayData = jedis.hget(shop.getName() + KeyUtils.DAY,
						canlendarYesterday.get(Calendar.YEAR) + UtilTool.monthAddZero(canlendarYesterday.get(Calendar.MONTH) + 1)
								+ UtilTool.monthAddZero(canlendarYesterday.get(Calendar.DAY_OF_MONTH)));
				if (StringUtils.isNotEmpty(jedisYesterdayData)) {
					RedisPojo jedisPojo = GsonUtils.gson.fromJson(jedisYesterdayData, RedisPojo.class);
					// 昨日销售
					showPojo.setYesterdaySale(jedisPojo.getGmv());
					//部门昨日累计
					showPojoBusiness.addYesterdaySale(jedisPojo.getGmv());
				}
				// 店铺总的数据本月
				
				int dayOfMonth=canlendar.get(Calendar.DAY_OF_MONTH);
				
				for(int i=1;i<=dayOfMonth;i++){
					String jedisMonthData = jedis.hget(shop.getName() + KeyUtils.DAY,
							canlendar.get(Calendar.YEAR) + UtilTool.monthAddZero(canlendar.get(Calendar.MONTH) + 1)+UtilTool.monthAddZero(i));
					if (StringUtils.isNotEmpty(jedisMonthData)) {
						RedisPojo jedisPojo = GsonUtils.gson.fromJson(jedisMonthData, RedisPojo.class);
						// 店铺本月目标累计
						showPojo.addGmvTarget(jedisPojo.getTarget());
						// 店铺本月销售累计
						showPojo.addGmv(jedisPojo.getGmv());
						//部门本月累计
						showPojoBusiness.addGmvTarget(jedisPojo.getTarget());
						showPojoBusiness.addGmv(jedisPojo.getGmv());
					}
				}
				shop.setShopTvShowTablePojo(showPojo);
			}
			//目标不为0执行保存
				if(showPojoBusiness.getGmvTarget().compareTo(BigDecimal.ZERO)==0){
					showPojoBusiness.setGmvRate(Double.valueOf(0.0d));
				}else{
					showPojoBusiness.setGmvRate(showPojoBusiness.getGmv().divide(showPojoBusiness.getGmvTarget(),5,RoundingMode.HALF_DOWN).doubleValue());
				}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			jedis.close();
		}
		
		return showPojoBusiness;
	}
}
