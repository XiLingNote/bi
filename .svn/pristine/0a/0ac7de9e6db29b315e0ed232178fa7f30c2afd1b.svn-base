package bi.baiqiu.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import bi.baiqiu.pojo.Shop;
import bi.baiqiu.pojo.User;
import bi.baiqiu.service.impl.UserServiceImpl;

@Controller
@RequestMapping("page")
public class PageController {
	@Autowired
	private UserServiceImpl userService;

	@RequestMapping("{value}")
	public String page(@PathVariable String value) {
		ArrayList<String> list = new ArrayList<String>();
		list.add("dailySales");
		list.add("monthlySales");
		list.add("salesTrend");
		list.add("topBrand");
		list.add("topStore");
		list.add("index");
		list.add("inputExcel");
		list.add("showlogin");
		list.add("pcFlowStructure");
		list.add("wirelessFlowStructure");
		list.add("storeSalesDemonstrate");
		boolean b = false;
		for (String string : list) {
			if (string.equals(value)) {
				b = true;
			}
		}

		if (b) {
			return "/" + value;
		} else {
			return "/" + value;
			// return "/index";
		}
	}

	@RequestMapping("left")
	public String left(Model model) {
		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
		Subject sub = SecurityUtils.getSubject();
		User user = (User) sub.getPrincipal();
		String scIds = user.getScIds();
		if (StringUtils.isNotBlank(scIds)) {
			List<Shop> shopList = userService.queryDepartmentShop(scIds);
			model.addAttribute("shopList", shopList);
		}
		return "/left";
	}

	@RequestMapping("top")
	public String top() {
		return "/top";
	}

	/**
	 * @Function PageController.java
	 * @Description: 用户登录方法，根据角色和权限返回不同页面 店铺分多个子权限，店铺子角色根据权限返回页面
	 * @param username
	 *            用户名
	 * @param password
	 *            密码
	 * @return：String 该角色(权限)对应的页面
	 * @throws：异常描述
	 * @author:Jim
	 * @date 2017年8月30日 Modification History: Date Author Version Description
	 *       ---------------------------------------------------------*
	 *       2017年8月30日 Jim 1.0.0
	 */
	@RequestMapping(value = "login", method = RequestMethod.POST)
	public String dologin(Model model, String username, String password) {
		Subject sub = SecurityUtils.getSubject();
		String pass = DigestUtils.md5Hex(password);
		UsernamePasswordToken token = new UsernamePasswordToken(username, pass);
		//
		// token.setRememberMe(true);
		try {
			sub.login(token);
			// 登录失败抛出该异常，用户名不对
		} catch (UnknownAccountException e) {
			model.addAttribute("msg", "User name or password error");
			return "/showlogin";
			// 登录失败抛出该异常，密码不对
		} catch (IncorrectCredentialsException e) {
			model.addAttribute("msg", "User name or password error");
			return "/showlogin";
		}

		// 不同用户返回不同登录页面
		// User user = (User) sub.getPrincipal();
		// 管理员及经理以上
		if (sub.hasRole("admin") || sub.hasRole("director")) {
			return "redirect:/page/index.do";
			// 店鋪admin,store_onlysee
		} else if (sub.hasRole("store_admin") || sub.hasRole("store_onlysee")) {

			return "redirect:/page/target.do";
			// 店铺子角色根据权限来判定页面(防止没有权限访问)
		} else if (sub.hasRole("store_sub_role")) {

			// delete_history() 数据修改权限不对应页面

			// target 目标展示页面
			if (sub.isPermitted("target")) {
				return "redirect:/page/target.do";
			}
			// flow
			if (sub.isPermitted("flow")) {
				return "redirect:/page/pcFlowStructure.do";
			}
			// fans_data
			if (sub.isPermitted("fans_data")) {
				return "redirect:/page/fansDaily.do";
			}
			// pay_data
			if (sub.isPermitted("pay_data")) {
				return "redirect:/page/saleProductsTreasure.do";
			}
			// commodity_property
			if (sub.isPermitted("commodity_property")) {
				return "redirect:/page/commodityProperty.do";
			}

		}
		return "redirect:/page/showlogin.do";
	}

	@RequestMapping("logout")
	public String logout(Model model, HttpServletRequest request) {
		Subject currentUser = SecurityUtils.getSubject();
		currentUser.logout();
		return "redirect:/page/showlogin.do";
	}
}
